name: Set Terraform Environment

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  actions: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-22.04 # Keeping it locked in to 22.04, avoiding any update issues when happens on GitHub's side.
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Pre-Dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Install Main Dependencies (Only If Missing)
        run: |
          while IFS= read -r package || [[ -n "" ]]; do
            # Ignore comments and empty lines in requirements.txt
            [[ "" =~ ^#.*$ || -z "" ]] && continue
            # Extract the actual package name (handle version constraints like "numpy==1.21.0")
            pkg_name=
            # Check if package is installed
            python -c "import " 2>/dev/null || pip install ""
          done < requirements.txt

      - name: Install tflint and shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          # Download the latest release of tflint
          TFLINT_VERSION=$(curl -s https://api.github.com/repos/terraform-linters/tflint/releases/latest | jq -r .tag_name)
          TFLINT_URL="https://github.com/terraform-linters/tflint/releases/download/${TFLINT_VERSION}/tflint-linux-amd64.zip"

          # Fetch the file
          curl -LO "$TFLINT_URL"

          # Fetch the current working directory
          CURRENT_PATH=$(pwd)
          echo "Current working directory: $CURRENT_PATH"

          # Look for the zip file in the current directory
          ZIP_FILE="$CURRENT_PATH/tflint-linux-amd64.zip"

          # Check if the file exists
          if [ -f "$ZIP_FILE" ]; then
            echo "Found the zip file: $ZIP_FILE"
          else
            echo "Error: tflint-linux-amd64.zip not found!"
            exit 1
          fi

          # Unzip and install
          unzip "$ZIP_FILE"
          sudo mv tflint /usr/local/bin/
          rm "$ZIP_FILE"


      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Run ShellCheck
        run: |
          sudo apt-get install -y shellcheck
          shellcheck infra/*.sh scripts/*.sh

      - name: Run tflint (Terraform Linting)
        run: |
          tflint --config .tflint.hcl ${GITHUB_WORKSPACE}/terraform-scripts

      - name: Check Terraform Formatting
        run: terraform fmt -recursive -check || true # Ignore errors on tfvars
        working-directory: ${{ github.workspace }}/terraform-scripts

      - name: Validate Terraform
        run: terraform validate
        working-directory: ${{ github.workspace }}/terraform-scripts

      - name: Initialize Terraform
        run: terraform init
        working-directory: ${{ github.workspace }}/terraform-scripts

      - name: Set PAT Token in environment
        run: echo "GH_TOKEN=${{ secrets.TERRAFORM_PAT }}" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.TERRAFORM_PAT }} 

      - name: Install Google Cloud CLI
        run: |
          sudo apt-get install -y google-cloud-cli
          gcloud --version

      - name: Run Google Cloud Authentication
        run: gh workflow run ci-google-auth.yml --ref main
        env:
          GH_TOKEN: ${{ secrets.TERRAFORM_PAT }}  

      - name: Check availability of compute-engine
        run: gh workflow run compute-api-availability.yml --ref main
        env:
          GH_TOKEN: ${{ secrets.TERRAFORM_PAT }}  

      - name: Save GCP Service Account Key - Also under terraform-scripts
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' | jq '.' > ${{ github.workspace }}/terraform-scripts/gcp-key.json
          gcloud auth activate-service-account --key-file=${{ github.workspace }}/terraform-scripts/gcp-key.json

      - name: Run health check script
        run: ./scripts/health-check.sh
